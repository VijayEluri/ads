"""
Players generally sit in a circle. The player designated to go first
says the number "1", and each player thenceforth counts one number in turn.
However, any number divisible by 'A' e.g. three is replaced by the word fizz
and any divisible by 'B' e.g. five by the word buzz.
Numbers divisible by both become fizz buzz. A player who hesitates or makes
a mistake is either eliminated.

Write a program that prints out the the pattern generated by such a scenario
given the values of 'A'/'B' and 'N' which are read from an input text file.
The input text file contains three space delimited numbers i.e. A, B, N.
The program should then print out the final series of numbers using 'F'
for fizz, 'B' for 'buzz' and 'FB' for fizz buzz.
"""

import unittest


def fizzbuzz(count, a, b):
    ret = []
    for i in range(1, count + 1):
        mod_a = (i % a) == 0
        mod_b = (i % b) == 0
        if mod_a:
            ret.append("F")
        if mod_b:
            ret.append("B")
        if not mod_a and not mod_b:
            ret.append(str(i))
        ret.append(" ")

    return "".join(ret).rstrip()


def fizzbuzz_alternative(count, a, b):
    """The same as above, but as a one liner (sort of)"""
    return "".join([
        "FB " if (i % a) == 0 and (i % b) == 0 else
        ("F " if (i % a) == 0 else
            ("B " if (i % b) == 0 else
                str(i) + " "))
        for i in range(1, count + 1)
    ]).rstrip()


class TestFizzBuzz(unittest.TestCase):
    def test_fizz_buzz(self):
        self.assertEqual("1 2 F 4 B F 7 8 F B", fizzbuzz(10, 3, 5))
        self.assertEqual("1 F 3 F 5 F B F 9 F 11 F 13 FB 15", fizzbuzz(15, 2, 7))
        self.assertEqual("1 F 3 F 5 F B F 9 F 11 F 13 FB 15", fizzbuzz(15, 2, 7))
        self.assertEqual("1 2 F 4 B F 7 8 F B 11 F 13 14 FB 16 17 F 19 B F 22 23 F B 26", fizzbuzz(26, 3, 5))
        self.assertEqual("1 F 3 F B F 7 F 9 FB 11 F 13 F B F 17 F 19 FB", fizzbuzz(20, 2, 5))
        self.assertEqual("FB FB FB FB FB FB FB FB FB FB", fizzbuzz(10, 1, 1))
        self.assertEqual("F FB F FB F FB F FB F FB", fizzbuzz(10, 1, 2))
        self.assertEqual("FB", fizzbuzz(1, 1, 1))
        self.assertEqual("", fizzbuzz(0, 1, 1))

    def test_fizz_buzz_alternative(self):
        self.assertEqual("1 2 F 4 B F 7 8 F B", fizzbuzz_alternative(10, 3, 5))
        self.assertEqual("1 F 3 F 5 F B F 9 F 11 F 13 FB 15", fizzbuzz_alternative(15, 2, 7))
        self.assertEqual("1 F 3 F 5 F B F 9 F 11 F 13 FB 15", fizzbuzz_alternative(15, 2, 7))
        self.assertEqual("1 2 F 4 B F 7 8 F B 11 F 13 14 FB 16 17 F 19 B F 22 23 F B 26", fizzbuzz_alternative(26, 3, 5))
        self.assertEqual("1 F 3 F B F 7 F 9 FB 11 F 13 F B F 17 F 19 FB", fizzbuzz_alternative(20, 2, 5))
        self.assertEqual("FB FB FB FB FB FB FB FB FB FB", fizzbuzz_alternative(10, 1, 1))
        self.assertEqual("F FB F FB F FB F FB F FB", fizzbuzz_alternative(10, 1, 2))
        self.assertEqual("FB", fizzbuzz_alternative(1, 1, 1))
        self.assertEqual("", fizzbuzz_alternative(0, 1, 1))


if __name__ == "__main__":
    unittest.main()
