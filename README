Here follows a set of implementations of various algorithms and data structures
which I developed for learning purposes through the years. The list here is not
intended to be either complete or exaustive but I'll try to improve that as
soon as I have some spare time.

What you'll find:
.
`-- dictionary/
    `-- chaineddict (chained lists for collision resolution)
    `-- oadict (open addressing for collision resolution)
`-- cache/
    `-- lru cache
`-- lists/
    `-- linked list
    `-- skip lists (a probabilistic alternative to balanced trees)
`-- matrix/
    `-- 90Â° degrees matrix rotation
`-- optimization/ (combinatorial optimization algorithms)
    `-- simulated annealing
`-- sets/ (set related algorithms)
    `-- union find
`-- sorting/ (sorting algorithms & related)
    `-- insertion sort
    `-- selection sort
    `-- merge sort
    `-- quick sort
    `-- heapsort
    `-- binary search
`-- trees/ (various trees implementations)
    `-- heap
    `-- trie

In 'interview questions' there also some implementations of solution for
simple interview problems:
- largest continuous sum of items in an array
- missing element
- string shuffling detection
- pretty-print a BST
- balanced parenthesis
- first non repeated character in a string
- odd occurring character in stream
- remove duplicate charaters from string
- insert item into correct position of a sorted array
- exact price on lottery ticket
- love formula calculator
- strange computer (bitmask interview)
- determine if a string has all unique characters
- clear rows/columns if there's a 0 in a matrix
- sum of numbers represented as linkedlist
- stack with min() in O(1)
- a queue using two stacks
- generate all valid combinations of parenthesis
- generate the powerset of a set
- permutations of a string
- sort a list of items using stacks
- check if binary tree is balanced
- penguin tiles games

TODO:
- lay out a better organization
- have running examples of every algorithm/data structure
